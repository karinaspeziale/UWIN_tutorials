library("unmarked")
?unmarkedFrameOccu()
y <- raccoon_wk %>%
select(visit_1:visit_5)
siteCovs <- raccoon_wk %>%
select(c(water, forest))
# We should also examine our covariates of interest to see how they distribute
hist(siteCovs$water)
hist(siteCovs$forest)
# We probably want to scale these covariates
siteCovs <- siteCovs %>%
mutate(water_scale = scale(water)) %>%
mutate(forest_scale = scale(forest)) %>%
select(-c(water, forest))
# Make sure this is a dataframe object
siteCovs_df <- data.frame(siteCovs)
raccoon_occ <- unmarkedFrameOccu(y = y, siteCovs = siteCovs_df)
summary(raccoon_occ)
null_model <- occu(~1 # detection
~1, # occupancy
data = raccoon_occ)
null_model
habitat_model <- occu(~1 # detection
~ forest_scale + water_scale, # occupancy
data = raccoon_occ)
habitat_model
# Now we want to compare our models. Thankfully `unmarked` has a function for that
fitlist <- fitList(m1 = null_model, m2 = habitat_model)
modSel(fitlist)
# it looks like our null model best explains our data. Let's look at our model parameters
# for detection and occupancy probabilities
plogis(coef(null_model, type = "state")) # for occupancy
plogis(coef(intercept_model, type = "det")) # for detection
plogis(coef(habitat_model, type = "det")) # for detection
# it looks like our null model best explains our data. Let's look at our model parameters
# for detection and occupancy probabilities
plogis(coef(null_model, type = "state")) # for occupancy
# it looks like our null model best explains our data. Let's look at our model parameters
# for detection and occupancy probabilities
plogis(coef(null_model, type = "state")) # for occupancy
plogis(coef(null_model, type = "det")) # for detection
# Do above but also include 95% confidence intervals
occ_error <- cbind(coef(null_model, type = "state"),
confint(null_model, type = "state"))
# do same for detection
det_error <- cbind(coef(null_model, type = "det"),
confint(null_model, type = "det"))
occ_error
det_error
# convert back to probability
plogis(occ_error)
plogis(det_error)
siteValue <- apply(X = y,
MARGIN = 1,
FUN = "max", na.rm = TRUE)
mean(siteValue)
View(y)
siteValue
?apply()
# it looks like our null model best explains our data. Let's look at our model parameters
# for detection and occupancy probabilities
plogis(coef(null_model, type = "state")) # for occupancy
mean(siteValue)
pred_forest <- data.frame(forest = seq(from = 0, to = 1, by = 0.05))
forest <- data.frame(forest = seq(from = 0, to = 1, by = 0.05))
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = forest)
forest <- forest %>%
forest_scale = scale(forest)
forest <- forest %>%
mutate(forest_scale = scale(forest))
View(forest)
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = forest_scale)
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = forest)
forest <- data.frame(forest = seq(from = 0, to = 1, by = 0.05),
water = seq(from = 0, to = 1, by = 0.05))
forest <- forest %>%
mutate(forest_scale = scale(forest)) %>%
mutate(water_scale = scale(water))
new_dat <- data.frame(forest = seq(from = 0, to = 1, by = 0.05),
water = seq(from = 0, to = 1, by = 0.05))
new_dat <- new_dat %>%
mutate(forest_scale = scale(forest)) %>%
mutate(water_scale = scale(water))
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = new_dat)
pred_forest
head(pred_forest)
View(raccoon_occ)
View(raccoon_wk)
View(siteCovs)
new_dat <- data.frame(forest = seq(from = 0, to = 1, by = 0.05),
water = mean(siteCovs$water_scale))
View(new_dat)
new_dat <- new_dat %>%
mutate(forest_scale = scale(forest))
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = new_dat)
View(new_dat)
new_dat <- data.frame(forest = seq(from = 0, to = 1, by = 0.05),
water_scale = mean(siteCovs$water_scale))
new_dat <- new_dat %>%
mutate(forest_scale = scale(forest))
# Make predictions with this data
pred_forest <- predict(habitat_model, type = "state", newdata = new_dat)
head(pred_forest)
# plot out easting
plot(pred_forest$Predicted ~ new_dat$CameraUTM_E, # y-axis ~ x-axis
type = "l",  # plot out a line
bty = "l", # box type is an L around plot
xlab = "Easting (UTM)", # x label
ylab = "Occupancy", # y label
ylim = c(0, 1), # range to y axis
lwd = 2, # width of the line
las = 1 # have numbers on y axis be vertical
)
# plot out easting
plot(pred_forest$Predicted ~ new_dat$forest_scale, # y-axis ~ x-axis
type = "l",  # plot out a line
bty = "l", # box type is an L around plot
xlab = "Easting (UTM)", # x label
ylab = "Occupancy", # y label
ylim = c(0, 1), # range to y axis
lwd = 2, # width of the line
las = 1 # have numbers on y axis be vertical
)
# plot out easting
plot(pred_forest$Predicted ~ new_dat$forest_scale, # y-axis ~ x-axis
type = "l",  # plot out a line
bty = "l", # box type is an L around plot
xlab = "Proportion forest", # x label
ylab = "Occupancy", # y label
ylim = c(0, 1), # range to y axis
xlim = c(0,1), # range to x axis
lwd = 2, # width of the line
las = 1 # have numbers on y axis be vertical
)
# plot
plot(pred_forest$Predicted ~ new_dat$forest_scale, # y-axis ~ x-axis
type = "l",  # plot out a line
bty = "l", # box type is an L around plot
xlab = "Proportion forest", # x label
ylab = "Occupancy", # y label
ylim = c(0, 1), # range to y axis
lwd = 2, # width of the line
las = 1 # have numbers on y axis be vertical
)
# plot
plot(pred_forest$Predicted ~ new_dat$forest_scale, # y-axis ~ x-axis
type = "l",  # plot out a line
bty = "l", # box type is an L around plot
xlab = "Scaled proportion forest", # x label
ylab = "Occupancy", # y label
ylim = c(0, 1), # range to y axis
lwd = 2, # width of the line
las = 1 # have numbers on y axis be vertical
)
# add 95% confidence intervals
lines(pred_forest$lower ~ new_dat$forest_scale, # y-axis ~ x-axis
lty = 2 # make a checked line
)
lines(pred_forest$upper ~ new_dat$forest_scale, # y-axis ~ x-axis
lty = 2 # make a checked line
)
View(pred_forest)
View(new_dat)
# first merge our datasets
all_dat <- bind_cols(pred_forest, new_dat)
View(all_dat)
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.5, linetype = "dashed") +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
coord_cartesian(ylim = c(0,1)) +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.5, linetype = "dashed") +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper, col = "blue"), alpha = 0.5, linetype = "dashed") +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), , col = "blue", alpha = 0.5, linetype = "dashed") +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
?geom_ribbon
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), col = "blue", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
# geom_ribbon(aes(ymin = lower, ymax = upper), col = "blue", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "teal", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion cover (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
?ggplot()
?scale_x_continuous()
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(c(0,1)) +
scale_y_continuous(c(0,1))+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(breaks = 0,1, by = 0.5) +
scale_y_continuous(breaks = 0,1, by = 0.5)+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
scale_y_continuous(limits = c(0.1))+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
scale_y_continuous(breaks = c(.1, 1))+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
scale_y_continuous(breaks = c(0, 1))+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
scale_y_continuous(breaks = c(.2, .4, .6, .8, 1))+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic() +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic()
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank()) +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_bw(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(family = "HelveticaNeue", colour = "black"),
axis.text = element_text(colour = "black"))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = .5),       # customising lots of things
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
panel.grid = element_blank(),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), units = , "cm"),
plot.title = element_text(size = 20, vjust = 1, hjust = 0.5),
legend.text = element_text(size = 12, face = "italic"),
legend.title = element_blank(),
legend.position = c(0.9, 0.9))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = .5),       # customising lots of things
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), units = , "cm"),
plot.title = element_text(size = 20, vjust = 1, hjust = 0.5),
legend.text = element_text(size = 12, face = "italic"),
legend.title = element_blank(),
legend.position = c(0.9, 0.9))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_light()
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(plot.title = element_text(hjust = 0.5))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(hjust = 0.5)
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
theme_update(plot.title = element_text(hjust = 0.5))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(plot.title = element_text(hjust = 0.5))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
# theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()+
theme(plot.title=element_text(hjust=0.5))
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
# geom_path(size = 1) +
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic()+ # drops gray background and grid
theme(plot.title=element_text(hjust=0.5)) # centers titles
ggplot(all_dat, aes(x = forest_scale, y = Predicted)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "orange", alpha = 0.5) +
geom_path(size = 1) + # adds line
labs(x = "Proportion forest (scaled)", y = "Occupancy probability") +
ggtitle("Raccoon Occupancy")+
scale_x_continuous(limits = c(0,1)) +
ylim(0,1)+
theme_classic()+ # drops gray background and grid
theme(plot.title=element_text(hjust=0.5)) # centers titles
