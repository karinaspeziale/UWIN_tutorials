---
format: 
  revealjs:
    slide-number: c/t
    width: 1200
    height: 800
    footer: "Git and GitHub"
    theme: solarized
    transition: fade
    transition-speed: fast
    incremental: true
    echo: true

---

## UWIN workshop: GitHub and Data Reproducibility

Nathan Byer and Mason Fidino

![](./images/github-mark.png){width=30%}

## Who we are

::: columns
::: {.column width="70%"}

::: {.nonincremental}
- Nathan Byer
  + NATHAN ADDS COOL STUFF ABOUT HIMSELF HERE
  + contact: 

:::

:::
::: {.column width="30%"}

![](./images/nathan_photo.jpg) 

:::
:::

## Who we are


::: columns
::: {.column width="70%"}

::: {.nonincremental}
- Mason Fidino
  + Senior Quantitative Ecologist at the Urban Wildlife Institute, Lincoln Park Zoo
  + Analytics advisor for UWIN, helps steer database management and development
  + contact: mfidino@lpzoo.org
:::

:::
::: {.column width="30%"}

![](./images/mason_headshot.jpg)

:::
:::



## How do researchers typically store files?

- `paper_draft.docx`
- `paper_draft2.docx`
- `paper_draft2_MF.docx`
- `paper_final.docx`
- `paper_final2.docx`
- `paper_final_revision.docx`

## Why is this a problem?

- How do you keep track of edits?
- How do we handle "accidents"?
- fundamentally, an issue with *data reproducibility*.

## Why worry about data reproducibility?

- We are currently experiencing a crisis of reproducibility in science!
- In response to this, code review is now a required component of peer review for many journals.
- Better, more reproducible code also makes it easier to standardize methodology.

## Git and GitHub

![](./images/git.png){width=30%}

![](./images/github-mark.png){width=30%}


## What is Git? 

![](./images/git.png){width=10%}

- Started in 2005 - version control system for Linux developers
- Now, one of the most commonly used **distributed version control systems**

![https://git-scm.com/book/en/v2/images/areas.png](./images/git-scm-git-diagram.png){width=50%}

## What is GitHub?

![](./images/github-mark.png){width=30%}

- GitHub is **an easier, user-friendly way to use Git online**
- integrates with a number of other software platforms - including RStudio
- Has LOADS of great documentation (we got lots of the information we are sharing here from `https://docs.github.com`)

# A brief overview of GitHub terminology

## Repository

- **Definition**: essentially, a project directory - where code, documents, and everything associated with a project will live.
- By default, typically contains a **README.md** file that describes the repository. 

## Clone

- **Definition**: the creation of a *local* copy of a *remote* repository.
  + In other words, you are copying the *remote* repository stored in the cloud on GitHub to a folder of your choice on your computer (i.e., creating a *local* copy).
  
## Branch

- **Definition**: Branches are used to isolate the development of code without affecting other parts of the code base.
  + When you create a repository you have one branch
  + New branches are created off an existing branch.
  + Branches are used to develop features, fix bugs, or safely experiment with new ideas in a contained part of a repository.
![](./images/git_branch_merge.png){width=100% align=center}

## Branch (example)

Nathan has some code for a project that works, but he wants to improve the code to make it run faster. To do so Nathan creates a branch titled `performance-tests` off of the main branch so he can try out different ways to improve the speed of his code without affecting the code in the `main` branch.

## Commit
- **Definition**: a summary of changes made to files within a repository on a given branch.
- typically capture the following:
  + a commit log, explaining the commit and its contributor(s)
  + a unique hash ID (GitHub handles this for you).
  + the **parent** commit - basically, where your commit came from!
  + a summary of files that have changed
  + In essence, a commit is the changes you made to your *local* copy of a repository, which you want to save and eventually send up to the *remote* repository.
  + commit early, commit often!
  
## Push

- **Definition**: when *local* commits are pushed to a branch on a *remote* repository.
- What do we mean by this?
  + you will likely be creating a commit on a local machine.
  + after you create that commit, it will **not** be reflected in the remote repository until those changes are pushed.
  + Commits records changes to the *local* repository.
  + Pushes update the *remote* repository with commits you've made.

## Pull

-**Definition**: when *remote* changes on a branch are applied to your *local*, cloned repository.
- What do we mean by this?
  + if you are working on a repository collaboratively, others may make edits that are **not** initially reflected in your *local* repository. 
  + when you pull from the remote repository, these remote changes are synced with your local directory.
  + Not to be confused with pull requests, which are a different thing!


## Pull Request

- **Definition**: A pull request (PR) is a way to tell collaborators (or yourself)
that the changes you pushed to a branch are ready for review. Think of a pull request as a staging area that you use before you merge one branch back into another.
  + To set up a pull request, you have to select the branch with the code you changed and the branch you want to merge those changes into. 
  + When working collaboratively, someone else reviews the pull request, discussion happens, and based on that some followup commits may be needed.
  + Once approved, you can merge the feature branch into the other branch you selected.
  
## Pull Request (example)

Example: Mason want's to make a new function for his `autoOcc` R package. To do so, Mason created a new branch, pushed commits to that branch, and when the function was ready made a pull request to merge the feature branch into the main branch.
  
  ![](./images/git_branch_merge.png){width=100% align=center}

## fork 

- **Definition**: A fork is a way to create a new repository based on a different repository you are (most often) not the owner of. 
  + You can think of forks it as a branch off a repository you do not own. You can make changes to your forked repository and then submit a pull request to the
  original project owner.
  + As such, forks are used a lot when working on open source projects.
  + Creating a fork is the easiest way to copy everything in someone else's repository.
  + However, if you are working on a research project with a few *trusted* people it is often easier to set them up as collaborators instead of having them fork your repository, make a PR of changes, etc.
